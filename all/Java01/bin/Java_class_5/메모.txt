1. 클래스 심화
	(1) Field(변수)
		1) 클래스 변수
			- 변수 앞에 static 키워드가 있어야 함
			- 모든 객체가 공유하는 변수
			- 객체를 생성하지 않아도 사용할 수 있음
		2) 인스턴스 변수
			- 변수 앞에 static이 없는 변수(일반적인 변수) cf) self.변수명 in Python
			- 객체를 생성할 때 생성되며, 객체마다 다름
		3) 로컬 변수
			- 함수 내, 제어문, 내에서 선언된 변수
		* 1), 2)를필드라고 함
		
	(2) Method(메서드, 함수)
		- 클래스 내에 있는 함수
		
		public static void main(String args[]){
		//접근 제한자 [static] 리턴타입 메서드명(매개변수)
		
		}
		
		1) 접근 제한자
			- 메서드를 실행할  수 있는 권한, 가장 넓은 권한 public
		2) static 
			- 객체 생성을 하지 않고도 사용할 수 있는지에 대한 keyword
			- static이 붙으면 객체 생성을 하지 않고 사용 가능
		3) 리턴 타입
			- 메서드는 값을 받기만 하나요? NO, 처리 후 값을 돌려줄 수도 있음
			- 돌려주는 값이 없을 때 void를 쓴다.
			- 돌려주는 값이 숫자라면 int, float, double 등이고 문자열이라면 String
		4) 메서드명
			- 변수명 규칙과 동일
				- 동사 + 대문자로 시작하는 명사 + 대문자로 시작하는 명사
				- printScreen, getPremium
		5) 매개변수(Parameter)
			- 메서드의 입력값
			- 메서드 입장에서는 외부에서 값을 받기 위해 사용
			- 입력값이 개수가 정해져 있을 때에는 (int a, float b) 등오로 전체를 기술
			- 입력값이 개수가 정해져 있지 않을 때에는 (String args[]) 등 배열을 사용
			
		6) 메서드 선언할 때 void가 아닌 경우
			메서드 선언할 때 void 가 아닌경우
			반드시 리턴값이 있어야 한다.
			return 값
			
		7) 메서드의 실행
			1) call(호출) *부른쪽을 caller 불린쪽을 callee
			
		8) 샐행 순서
			- 처음 실행한 메서드가 가장 늦게 종료된다 (Stack) cf) FIFO(First Input First Outm Queue)
			
		9) 메서드 오버로딩(Overload)
			- 같은 이름으로 입력값을 종류에 따라 다르게 처리하고 싶을 경우
	(3) Constructor
		- new와 함께 객체를 생성할 때 사용
		- 주로 변수 초기화 및 생성 시 필요한 실행문들을 기록
		
		클래스명() {
		} => new 클래스명() 이렇게 생성될 때를 처리
		
		클래스명(변수) {
		} => new 클래스명(변수) 이렇게 생성될 때를 처리
	
	(4) this
		- 객체가 본인(짐)을 말할 때 씀
		- 외부로부터의 변수명이 내가 가진 필드명과 동일할 때 this.필드명 이라고 써준다
		
	(5) 초기화 블럭
		- 2가지 타입이 있으며 무조건 실행되는 함수
		- 생성자보다 먼저 실행되며, 모든 생성자가 공통으로 적용되는 로직에 유용
		
		static {
		
		} => 첫 번째 객체 생성시 최초 1회만 호출
		
		{
			
		} => 객체 생성 시마다 실행
	
	(6) 패키지
		- 클래스를 폴더별로 관리하기 위한 목적(용도별, 권한별)
		
	(7) 접근제어
		1) public: 누구든지 사용가능
		2) protected: 누구든지(X), 상속받은(O), 동일디렉토리(O), 클래스내(O)
		3) (default): 누구든지(X), 상속받은(X), 동일디렉토리(O), 클래스내(O)
		4) private: 누구든지(X), 상속받은(X), 동일디렉토리(X), 클래스내(O)
		
	(8) final
		- 변수에다가 final을 붙이면 수정 불가능
		- 클래스에다가 final을 붙이면 상속 불가능
		- 메서드에다가 final을 붙이면 상속 후 수정 불가능
		