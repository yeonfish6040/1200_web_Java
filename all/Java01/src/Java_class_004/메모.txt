1. 함수(Function)
	- 어떤 행동을 하는 것을 별도로 만들어놓은 것
	
	(1) static
		- 객체 생성을 하지않고도 사용할 수 있는 keyword
	(2) return type
		- 돌려주는 값이 없다면 void
		- 돌려주는 값이 있다면 int, float, double, String, String[]
		- 우리가 매번 쓰던 main이 void type.
	(3) 함수명
		- 동사 + 대문자로 시작하는 명사
		- printScreen, getMemberVariables
	(4) 매개 변수 (parameter
		- 함수가 외부로부터 값을 받기 위해 상ㅇ
		- 입력값의 개수가 정해져 있을 때는 (int a, int b)같이 기술
		- 입력값의 개수가 정해져 있지 않을때는 (String[] args) 같이 기술
	(5) 리턴값
		- return 값
		- void도 return을 사용할 수 있으면, 중단하고 아래 부분을 실행하지 않음
		
2. 클래스와 객체, 객체지향(Object-oriented)
	(1) History
		- 변수: 하나의 값만 저장
		- 배열: 여러 개의 값을 저장
		- 구조체(struct): 여러 종류의 값을 저장
		- 클래스(Class): 여러 종류의 값 + 기능
	(2) 정의
		1) 클래스(Class): 설계도
		2) 객체(Object): 설계도로 만들 실제 작품
			- 객체지향 프로그래밍은 결국 클래스 디자인
		
			*클래스 자체는 아무 것도 아니며, 객체로 만들어져야 의미를 갖는다.
			cf) apple, an apple의 차이와 유사
	(3) 객체 지향 프로그램의 특징
		1) 상속(Inheritance)
			- 하위 클래스가 상위 클래스가 가진 것을 물려받는 것
		2) 다형성(Polymorphism)
			- 같은 이름이지만 호출하는 형태에 따라 다르게 개발
		3) 추상화(Abstraction)
			- 공통적인 특성이나 속성을 추출하는 것
		4) 캡슐화(Encapsulation)
			- 내부를 공개하지 않는 것, 불필요하게 복잡한 것을 피하고 위험에서 보호
			
	(4) 클래스의 구조
		1) 필드(Field)
			- 클래스 안에 있는 변수, 클래스 내의 함수에 있는 변수는 아님
			- 원래 이름은 멤버 변수
		2) 메서드(method)
			- 클래스 안에 있는 함수
			- 원래 이름은 멤버 함수
		3) 생성자 또는 생성 함수(Constructor)
			- 클래스가 객체로 만들어질 때 불리는 함수
			- 클래스명과 동일한 이름이 생성자
			- 객체로 만들어질 때 필요한 작업들을 넣어놓는다.
			